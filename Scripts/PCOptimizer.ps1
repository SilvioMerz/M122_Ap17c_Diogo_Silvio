########################################################################
# Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.10.0
# Generated On: 27.03.2020 15:28
# Generated By: Silvio Merz
########################################################################


function DeleteFiles($toEmpty)
{
    #Get objects from folders
    Get-ChildItem -Path $toEmpty -Recurse -Force | 
    ForEach {
        try {
            #Delete object
            $_ | rm -Recurse -Force -ErrorAction Stop
        } catch {
            #Warning if object is used
            Write-Warning "Could not remove Item $($_.TargetObject)"
        }
    }
}

function changeAutostart($byteCode)
{
    #Check- if no apps were selected
    if ($listAutostart.SelectedIndices.Count -eq 0) {
        & $messageBoxNoSelection
    } else {

        #Get selected app name
        $appname = $listAutostart.SelectedItems.Text

        #Change autostart value of selected app
        Set-ItemProperty -Path HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run -Name $appname -Value ($byteCode)
        
        [System.Windows.MessageBox]::Show('Die ausgewählte App wurde erfolgreich deaktiviert','PC Optimizer')
    }
}

function MessageBoxSelection($text)
{
    #Message box with defined title and options and only variable text
    [System.Windows.MessageBox]::Show($text,'PC Optimizer','YesNo','Question')
}

function GenerateForm {
#region Import the Assemblies
[reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
[reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
#endregion


$InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState


$OnLoadForm_StateCorrection =
{#Correct the initial state of the form to prevent the .Net maximized form issue
    $formular.WindowState = $InitialFormWindowState
}


$messageBoxNoSelection = 
{
    [System.Windows.MessageBox]::Show('Nichts gewählt','PC Optimizer','OK','Warning')
}


##################################################
#"Leeren" button is pressed:
##################################################
$emptyDirectives= 
{
    #Check if no checkbox was selected
    if (!$music.Checked -and !$video.Checked -and !$downloads.Checked -and !$paperBin.Checked) {
        & $messageBoxNoSelection
    } 
    else {
        #If at least one box was selected action confirmation required
        $msgBoxSelection = MessageBoxSelection("Ordner leeren?")

        switch  ($msgBoxSelection) {  
            #User pressed Yes:
            'Yes' {
                $foldersToEmpty = @()
                #Takes the path of the selected folders
                if ($music.Checked) {
                    $foldersToEmpty += "$env:USERPROFILE\Music"
                }

                if ($video.Checked) {
                    $foldersToEmpty += "$env:USERPROFILE\Videos"
                }

                if ($downloads.Checked) {
                    $foldersToEmpty += "$env:USERPROFILE\Downloads"
                }

                if ($paperBin.Checked) {
                    $foldersToEmpty += "C:\`$Recycle.Bin\" + ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
                }

                DeleteFiles($foldersToEmpty)
                [System.Windows.MessageBox]::Show('Die ausgewählten Ordner wurden erfolgreich geleert','PC Optimizer')
            }
            #User pressed No:
            #Nothing happens
        }
    }
}
##################################################


##################################################
#"Temporäre Dateien löschen" button is pressed:
##################################################
$deleteTempFiles= 
{
    #Ask for confirmation messagebox
    $msgBoxSelection = MessageBoxSelection("Temporäre Dateien löschen?")

    switch  ($msgBoxSelection) {
        #User pressed Yes:
        'Yes' {
            #Temp files paths
            $tempfolders = @(“C:\Windows\Temp\*”, “C:\Windows\Prefetch\*”, “C:\Users\*\Appdata\Local\Temp\*”)

            DeleteFiles($tempfolders)
            [System.Windows.MessageBox]::Show('Die temporären Dateien wurden erfolgreich gelöscht','PC Optimizer')
        }
        #User pressed No:
        #Nothing happens
    }
}
##################################################


##################################################
#"Deaktivieren" button is pressed:
##################################################
$deactivateApp= 
{
    #Bytecode to deactivate autostart
    changeAutostart([byte[]](0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
}
##################################################


##################################################
#"Aktivieren" button is pressed:
##################################################
$activateApp= 
{
    #Bytecode to activate autostart
    changeAutostart([byte[]](0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00))
}
##################################################


##################################################
#"Beenden" button is pressed::
##################################################
$quitProcess= 
{
    #Check- if no processes were selected
    if ($listProcesses.SelectedIndices.Count -eq 0) {
        & $messageBoxNoSelection
    } 
    else {
    #Get selected processes
    $selectedProcesses = @($listProcesses.SelectedIndices)
 
    #Get ids of selected processes
    $columnIndex = ($listProcesses.Columns | Where {$_.Text -eq "Id"}).Index
   
    #Stop selected tasks
    $selectedProcesses | ForEach-Object {
        #Stop task by Id
        Stop-Process -Id ($listProcesses.Items[$_].SubItems[$columnIndex]).Text -Confirm:$false -Force
    }
 
    #Update listview
    Start-Sleep -s 0.55
    &$updateProcesses

    [System.Windows.MessageBox]::Show('Die ausgewählten Prozesse wurden erfolgreich beendet','PC Optimizer')
    }
}
##################################################


##################################################
#"Aktualisieren" button is pressed:
##################################################
$updateProcesses= 
{
    #Clear listview
    $listProcesses.Items.Clear()
    $listProcesses.Columns.Clear()

    #Get processes
    $processes = Get-Process | Select Id,ProcessName | Sort-Object ProcessName
    $processProperties = $processes[0].psObject.Properties

    #Create Listview header
    $processProperties | ForEach-Object {
        $listProcesses.Columns.Add("$($_.Name)")
    }
    #Show processes
    ForEach ($process in $processes){
 
        $processListViewItem = New-Object System.Windows.Forms.ListViewItem($process.Id)
 
        $process.psObject.Properties | Where {$_.Name -ne "Id"} | ForEach-Object {
            $columnName = $_.Name
            $processListViewItem.SubItems.Add("$($process.$columnName)")
        }
        $listProcesses.Items.Add($processListViewItem)
 
    }

    $listProcesses.Columns[0].Width = 40
    $listProcesses.Columns[1].Width = 175
}
##################################################


#Create form
$formular = New-Object System.Windows.Forms.Form
$formular.ClientSize = New-Object System.Drawing.Size(400,555)
$formular.ShowIcon = $False
$formular.Text = "PC Optimizer"
$formular.FormBorderStyle = 'FixedDialog'
$formular.MaximizeBox = $False


#Add label "Speicheroptimierung"
$storageOptimization = New-Object System.Windows.Forms.Label
$storageOptimization.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",30,1,2,1)
$storageOptimization.Location = New-Object System.Drawing.Size(15,15)
$storageOptimization.Size = New-Object System.Drawing.Size(370,40)
$storageOptimization.Text = "Speicheroptimierung"

$formular.Controls.Add($storageOptimization)

#Add checkbox "Papierkorb"
$paperBin = New-Object System.Windows.Forms.CheckBox
$paperBin.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$paperBin.Location = New-Object System.Drawing.Size(50,65)
$paperBin.Size = New-Object System.Drawing.Size(150,20)
$paperBin.Text = "Papierkorb"

$formular.Controls.Add($paperBin)

#Add checkbox "Musik Ordner"
$music = New-Object System.Windows.Forms.CheckBox
$music.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$music.Location = New-Object System.Drawing.Size(200,65)
$music.Size = New-Object System.Drawing.Size(150,20)
$music.Text = "Musik Ordner"

$formular.Controls.Add($music)

#Add checkbox "Downloads"
$downloads = New-Object System.Windows.Forms.CheckBox
$downloads.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$downloads.Location = New-Object System.Drawing.Size(50,95)
$downloads.Size = New-Object System.Drawing.Size(150,20)
$downloads.Text = "Downloads"
    
$formular.Controls.Add($downloads)

#Add checkbox "Video Ordner"
$video = New-Object System.Windows.Forms.CheckBox
$video.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$video.Location = New-Object System.Drawing.Size(200,95)
$video.Size = New-Object System.Drawing.Size(150,20)
$video.Text = "Video Ordner"

$formular.Controls.Add($video)

#Add button "Leeren"
$emptyBtn = New-Object System.Windows.Forms.Button
$emptyBtn.Location = New-Object System.Drawing.Size(20,125)
$emptyBtn.Size = New-Object System.Drawing.Size(360,30)
$emptyBtn.Text = "Leeren"
$emptyBtn.add_Click($emptyDirectives)
    
$formular.Controls.Add($emptyBtn)


#Add label "Speicheroptimierung"
$performanceOptimization = New-Object System.Windows.Forms.Label
$performanceOptimization.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",30,1,2,1)
$performanceOptimization.Location = New-Object System.Drawing.Size(15,175)
$performanceOptimization.Size = New-Object System.Drawing.Size(370,40)
$performanceOptimization.Text = "Leistungsoptimierung"
    
$formular.Controls.Add($performanceOptimization)

#Add button "Temporäre Dateien löschen"
$emptyTmpBtn = New-Object System.Windows.Forms.Button
$emptyTmpBtn.Location = New-Object System.Drawing.Size(20,225)
$emptyTmpBtn.Size = New-Object System.Drawing.Size(360,30)
$emptyTmpBtn.Text = "Temporäre Dateien löschen"
$emptyTmpBtn.add_Click($deleteTempFiles)
    
$formular.Controls.Add($emptyTmpBtn)

#Add label "Autostart"
$autostart = New-Object System.Windows.Forms.Label
$autostart.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$autostart.Location = New-Object System.Drawing.Size(20,265)
$autostart.Size = New-Object System.Drawing.Size(360,20)
$autostart.Text = "Autostart"

$formular.Controls.Add($autostart)

#Add listview "Autostart-Apps"
$listAutostart = New-Object System.Windows.Forms.ListView
$listAutostart.Location = New-Object System.Drawing.Size(20,295)
$listAutostart.Size = New-Object System.Drawing.Size(235,100)
$listAutostart.UseCompatibleStateImageBehavior = $False
$listAutostart.View = "Details"
$listAutostart.MultiSelect = $False
$listAutostart.Columns.Add("App")
$listAutostart.AutoResizeColumns(1) 
    
#Get users autostart apps
Get-CimInstance Win32_StartupCommand | Where {$_.Location -eq "HKU\" + ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value + "\SOFTWARE\Microsoft\Windows\CurrentVersion\Run"} | Select-Object Name | ForEach-Object {
    $listAutostart.Items.Add($_.Name)
}

$formular.Controls.Add($listAutostart)

#Add button "Deaktivieren"
$deactivateBtn = New-Object System.Windows.Forms.Button
$deactivateBtn.Location = New-Object System.Drawing.Size(265,310)
$deactivateBtn.Size = New-Object System.Drawing.Size(115,30)
$deactivateBtn.Text = "Deaktivieren"
$deactivateBtn.add_Click($deactivateApp)
    
$formular.Controls.Add($deactivateBtn)

#Add button "Aktivieren"
$activateBtn = New-Object System.Windows.Forms.Button
$activateBtn.Location = New-Object System.Drawing.Size(265,350)
$activateBtn.Size = New-Object System.Drawing.Size(115,30)
$activateBtn.Text = "Aktivieren"
$activateBtn.add_Click($activateApp)
    
$formular.Controls.Add($activateBtn)

#Add label "Prozesse"
$processes = New-Object System.Windows.Forms.Label
$processes.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$processes.Location = New-Object System.Drawing.Size(20,405)
$processes.Size = New-Object System.Drawing.Size(360,20)
$processes.Text = "Prozesse"
    
$formular.Controls.Add($processes)

#Add listview "laufende Tasks"
$listProcesses = New-Object System.Windows.Forms.ListView
$listProcesses.Location = New-Object System.Drawing.Size(20,435)
$listProcesses.Size = New-Object System.Drawing.Size(235,100)
$listProcesses.UseCompatibleStateImageBehavior = $False
$listProcesses.View = "Details"
$listProcesses.MultiSelect = $True
$listProcesses.FullRowSelect = $true
$listProcesses.GridLines = $true
    
$formular.Controls.Add($listProcesses)

#Add button "Aktualisieren"
$updateBtn = New-Object System.Windows.Forms.Button
$updateBtn.Location = New-Object System.Drawing.Size(265,490)
$updateBtn.Size = New-Object System.Drawing.Size(115,30)
$updateBtn.Text = "Aktualisieren"
$updateBtn.add_Click($updateProcesses)
    
$formular.Controls.Add($updateBtn)

#Add button "Beenden"
$quitBtn = New-Object System.Windows.Forms.Button
$quitBtn.Location = New-Object System.Drawing.Size(265,450)
$quitBtn.Size = New-Object System.Drawing.Size(115,30)
$quitBtn.Text = "Beenden"
$quitBtn.add_Click($quitProcess)
    
$formular.Controls.Add($quitBtn)

#Save the initial state of the form
$InitialFormWindowState = $formular.WindowState
#Init the OnLoad event to correct the initial state of the form
$formular.add_Load($OnLoadForm_StateCorrection)
#Show the Form
$formular.ShowDialog()| Out-Null

}

#Create login form
$loginF = New-Object System.Windows.Forms.Form
$loginF.ClientSize = New-Object System.Drawing.Size(380,60)
$loginF.ShowIcon = $False
$loginF.Text = "PC Optimizer"
$loginF.FormBorderStyle = 'FixedDialog'
$loginF.MaximizeBox = $False
$loginF.MinimizeBox = $False

#Add label "Passwort"
$passwortLbl = New-Object System.Windows.Forms.Label
$passwortLbl.Font = New-Object System.Drawing.Font("Microsoft Sans Serif",15,0,2,1)
$passwortLbl.Location = New-Object System.Drawing.Size(20,20)
$passwortLbl.Size = New-Object System.Drawing.Size(80,20)
$passwortLbl.Text = "Passwort"
    
$loginF.Controls.Add($passwortLbl)

#Add Inputfield "Passwort"
$passwortInput = New-Object System.Windows.Forms.MaskedTextBox
$passwortInput.Location = New-Object System.Drawing.Size(100,20)
$passwortInput.Size = New-Object System.Drawing.Size(200,20)
$passwortInput.PasswordChar = '*'

$loginF.Controls.Add($passwortInput)

#Add button "Beenden"
$loginBtn = New-Object System.Windows.Forms.Button
$loginBtn.Location = New-Object System.Drawing.Size(320,20)
$loginBtn.Size = New-Object System.Drawing.Size(50,20)
$loginBtn.Text = "Login"
$loginBtn.add_Click({
    if ($passwortInput.Text -ceq "PC-Optimizer_Admin") {
        #Close login form
        $loginF.Hide()
        $loginF.Close() | Out-Null

        #Show PC Optimizer
        GenerateForm
    } 
    else {
        [System.Windows.MessageBox]::Show('Passwort ist falsch!','PC Optimizer','OK','Warning')
    }
})
    
$loginF.Controls.Add($loginBtn)
#Use Enter-Key to submit form
$loginF.AcceptButton = $loginBtn

#Show login form
$loginf.ShowDialog()
